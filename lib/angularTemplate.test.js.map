{"version":3,"sources":["../src/angularTemplate.test.js"],"names":["angular","module","ngReact","name","config","$compileProvider","debugInfoEnabled","value","decorator","$delegate","Component","directive","restrict","template","transclude","replace","reactDirective","SomeReact","props","toto","component","propTypes","t","string","func","scope","link","$scope","$element","ReactDOM","render","React","createElement","describe","$compile","$rootScope","$container","beforeEach","mock","inject","$injector","$document","element","data","append","_$compile_","_$rootScope_","afterEach","remove","compile","clone","$digest","children","it","find","html","to","equal","hasClass","be","true","prop","eq","length","plop","false","$apply","$parent","Object","getPrototypeOf","not","$templateCache","put","Controller","exist","id","attr","found","ra","propsToPass","text","isRequired","ComponentPassingScope","eql"],"mappings":"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","file":"angularTemplate.test.js","sourcesContent":["import angular from 'angular';\nimport 'angular-mocks';\nimport { expect } from 'chai';\nimport ngReact from 'ngreact';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport t from 'prop-types';\n\nimport AngularTemplate, { provideAngularScopeHOC, reactAngularModule } from './angularTemplate';\n\nangular.module('testAngularTemplate', [ngReact.name, reactAngularModule().name])\n  .config(($compileProvider) => $compileProvider.debugInfoEnabled(false))\n  .value('Component', null)\n  .decorator('Component', ($delegate) => angular.module('testAngularTemplate').Component)\n  .directive('plop', () => ({\n    restrict: 'E',\n    template: '<div class=\"plop\"></div>',\n  }))\n  .directive('simpleTemplateDirective', () => ({\n    restrict: 'E',\n    template: '<div class=\"simple\"></div>',\n  }))\n  .directive('transcludeDirective', () => ({\n    restrict: 'E',\n    transclude: true,\n    template: '<div class=\"transclude\"><div class=\"one\">plop</div><div class=\"two\" ng-transclude></div></div>',\n  }))\n  .directive('replaceDirective', () => ({\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"replace\"></div>',\n  }))\n  .directive('ngReactDirective', (reactDirective) => {\n    const SomeReact = (props) => (\n      <div>\n        <span className=\"toto\">{props.toto}</span>\n        {props.component()}\n      </div>\n    );\n    SomeReact.propTypes = { toto: t.string, component: t.func, };\n\n    return reactDirective(SomeReact);\n  })\n  .directive('manualReact', () => ({\n    restrict: 'E',\n    scope: {\n      props: '&',\n    },\n    link: ($scope, $element) => {\n      ReactDOM.render(React.createElement(angular.module('testAngularTemplate').Component, {\n        ...$scope.props(),\n        $scope,\n      }), $element[0]);\n    }\n  }))\n;\n\ndescribe('AngularTemplate', () => {\n  let $compile;\n  let $rootScope;\n  let $container;\n\n  beforeEach(angular.mock.module('testAngularTemplate'));\n  beforeEach(angular.mock.inject(($injector, $document) => {\n    $container = angular.element('<div></div>');\n    $container.data('$injector', $injector);\n    $document.append($container);\n  }));\n  beforeEach(angular.mock.inject((_$compile_, _$rootScope_) => {\n    $compile = _$compile_;\n    $rootScope = _$rootScope_;\n  }));\n  afterEach(() => {\n    $container.remove();\n  });\n\n  const compile = (Component, props = {}) => {\n    angular.module('testAngularTemplate').Component = Component;\n    $rootScope.props = props;\n\n    const element = $compile('<react-component name=\"Component\" props=\"props\"></react-component>')($rootScope, (clone) => {\n      $container.append(clone);\n    });\n    $rootScope.$digest();\n\n    return element.children();\n  };\n\n  it('works with simple HTML', () => {\n    const element = compile(() => <AngularTemplate template=\"<h1>plop</h1>\"/>);\n\n    expect(element.find('h1').html()).to.equal('plop');\n  });\n\n  it('works with an interpolation', () => {\n    const element = compile(() => <AngularTemplate template=\"<h1>{{1+1}}</h1>\"/>);\n\n    expect(element.find('h1').html()).to.equal('2');\n  });\n\n  it('injects values in the function template', () => {\n    const template = ({ value }) => value;\n    const element = compile(() => <AngularTemplate template={template} inject={{ value: 'plop' }}/>);\n\n    expect(element.html()).to.equal('plop');\n  });\n\n  it('applies the class to the wrapper', () => {\n    const element = compile(() => <AngularTemplate className=\"plop\"/>);\n\n    expect(element.hasClass('plop')).to.be.true;\n  });\n\n  it('wraps with a div by default', () => {\n    const element = compile(() => <AngularTemplate/>);\n\n    expect(element.prop('tagName')).to.equal('DIV');\n  });\n\n  it('applies the requested wrapper tag', () => {\n    const element = compile(() => <AngularTemplate wrapperTag=\"span\"/>);\n\n    expect(element.prop('tagName')).to.equal('SPAN');\n  });\n\n  it('applies the requested wrapper directive', () => {\n    const element = compile(() => <AngularTemplate wrapperTag=\"simple-template-directive\"/>);\n\n    expect(element.prop('tagName')).to.equal('SIMPLE-TEMPLATE-DIRECTIVE');\n    expect(element.children().hasClass('simple')).to.be.true;\n  });\n\n  it('can embed simple directives as JSX with className', () => {\n    const element = compile(() => <AngularTemplate className=\"plop\">\n      <plop className=\"pof\"/>\n    </AngularTemplate>);\n\n    expect(element.prop('tagName')).to.equal('PLOP');\n    expect(element.hasClass('plop')).to.be.true;\n    expect(element.hasClass('pof')).to.be.true;\n    expect(element.children().hasClass('plop')).to.be.true;\n  });\n\n  it('can embed component directives as JSX with className', () => {\n    const element = compile(() => <AngularTemplate className=\"plop\">\n      <simple-template-directive class=\"pof\" ng-bind=\"'pof'\"/>\n    </AngularTemplate>);\n\n    expect(element.prop('tagName')).to.equal('SIMPLE-TEMPLATE-DIRECTIVE');\n    expect(element.hasClass('plop')).to.be.true;\n    expect(element.hasClass('pof')).to.be.true;\n    // ng-bind removes the actual directive content from the element\n    expect(element.html()).to.equal('pof');\n  });\n\n  it('works with transcluding directives', () => {\n    const element = compile(() => <AngularTemplate>\n      <transclude-directive>\n        <plop/>\n      </transclude-directive>\n    </AngularTemplate>);\n\n    expect(element.prop('tagName')).to.equal('TRANSCLUDE-DIRECTIVE');\n    expect(element.children().hasClass('transclude')).to.be.true;\n    expect(element.children().children().eq(0).hasClass('one')).to.be.true;\n    expect(element.children().children().eq(1).hasClass('two')).to.be.true;\n    expect(element.children().children().eq(1).children().prop('tagName')).to.equal('PLOP');\n    expect(element.children().children().eq(1).children().children().hasClass('plop')).to.be.true;\n  });\n\n  it('does not fail on mutation', () => {\n    const element = compile(() => <AngularTemplate>\n      <replace-directive/>\n    </AngularTemplate>);\n\n    expect(element.prop('tagName')).to.equal('DIV');\n    expect(element.hasClass('replace')).to.be.true;\n  });\n\n  it('does not fail on repeat', () => {\n    const element = compile(() => <AngularTemplate>\n      <div data-ng-repeat=\"val in ['a', 'b']\" data-ng-class=\"val\"/>\n    </AngularTemplate>);\n\n    expect(element.prop('tagName')).to.equal('DIV');\n    expect(element.length).to.equal(2);\n    expect(element.eq(0).hasClass('a')).to.be.true;\n    expect(element.eq(1).hasClass('b')).to.be.true;\n  });\n\n  it('does not fail on ngIf', () => {\n    const element = compile(() => <AngularTemplate>\n      <div data-ng-if=\"false\"/>\n    </AngularTemplate>);\n\n    expect(element.length).to.equal(0);\n  });\n\n  it('does not crash on props update', () => {\n    const Component = (props) => <AngularTemplate className=\"plop\">\n      <plop data-ng-class=\"props.plop\"/>\n    </AngularTemplate>;\n    Component.propTypes = {\n      plop: t.string,\n    };\n    const props = {\n      plop: 'plop',\n    };\n    const element = compile(Component, props);\n\n    expect(element.prop('tagName')).to.equal('PLOP');\n    expect(element.hasClass('plop')).to.be.true;\n    expect(element.hasClass('pof')).to.be.false;\n\n    props.plop = 'pof';\n    $rootScope.$apply();\n\n    expect(element.hasClass('plop')).to.be.false;\n    expect(element.hasClass('pof')).to.be.true;\n  });\n\n  it('creates a new scope by default', () => {\n    const element = compile(() => <AngularTemplate/>);\n\n    const scope = element.scope();\n    expect(scope.$parent).to.equal($rootScope);\n    expect(Object.getPrototypeOf(scope)).to.equal($rootScope);\n  });\n\n  it('can prevent a new scope from being created', () => {\n    const element = compile(() => <AngularTemplate scope={false}/>);\n\n    expect(element.scope()).to.equal($rootScope);\n  });\n\n  it('can create an isolate scope', () => {\n    const element = compile(() => <AngularTemplate isolate/>);\n\n    const scope = element.scope();\n    expect(scope.$parent).to.not.equal(Object.getPrototypeOf(scope));\n  });\n\n  it('injects scope variables', () => {\n    const element = compile(() => <AngularTemplate scope={{ plop: 'pof' }} template=\"{{plop}}\"/>);\n\n    expect(element.html()).to.equal('pof');\n  });\n\n  it('can use a template URL', angular.mock.inject(($templateCache) => {\n    $templateCache.put('plop.html', 'plop');\n    const element = compile(() => <AngularTemplate templateUrl=\"plop.html\"/>);\n\n    expect(element.html()).to.equal('plop');\n  }));\n\n  it('can specify and inject a controller', () => {\n    class Controller {\n      constructor($scope, $document, value) {\n        expect($document).to.exist;\n        $scope.plop = value;\n      }\n    }\n    const element = compile(() => <AngularTemplate\n      controller={Controller}\n      template=\"{{plop}}\"\n      inject={{ value: 'pof' }}\n    />);\n\n    expect(element.html()).to.equal('pof');\n  });\n\n  it('can specify and inject a controller with controllerAs', () => {\n    class Controller {\n      constructor($scope, $document, value) {\n        expect($document).to.exist;\n        this.plop = value;\n      }\n    }\n\n    const element = compile(() => <AngularTemplate\n      controller={Controller}\n      controllerAs=\"ctl\"\n      template=\"{{ctl.plop}}\"\n      inject={{ value: 'pof' }}\n    />);\n\n    expect(element.html()).to.equal('pof');\n  });\n\n  it('applies attributes to the surrounding tag', () => {\n    const element = compile(() => <AngularTemplate\n      wrapperAttrs={{\n        id: 'plop',\n        'data-ng-bind': '\"pof\"',\n        'aria-role': 'menu',\n      }}\n    />);\n\n    expect(element.html()).to.equal('pof');\n    expect(element.attr('id')).to.equal('plop');\n    expect(element.attr('aria-role')).to.equal('menu');\n  });\n\n\n  it('exposes the scope in the API', () => {\n    const found = {};\n    class Component extends React.Component {\n      componentDidMount() {\n        found.$scope = this.ra.$scope;\n        found.$element = this.ra.$element;\n      }\n\n      render() {\n        return <AngularTemplate ref={(ra) => this.ra = ra}/>;\n      }\n    }\n    compile(Component);\n\n    expect(found.$scope).to.exist;\n    expect(found.$scope.$parent).to.equal($rootScope);\n    expect(found.$element).to.exist;\n    expect(found.$element.prop('tagName')).to.equal('DIV');\n  });\n\n  it('passes the scope in ngReact custom directives', () => {\n    const found = {};\n    const Component = ()  => <AngularTemplate ref={(ra) => found.ra = ra}/>;\n\n    $rootScope.propsToPass = { toto: 'voila' };\n    $rootScope.Component = Component;\n\n    const $element = $compile('<ng-react-directive toto=\"propsToPass.toto\" component=\"Component\" />')($rootScope, (clone) => {\n      $container.append(clone);\n    });\n    $rootScope.$digest();\n\n    expect(found.ra.$scope).to.exist;\n    expect(found.ra.$scope.$parent).to.equal($rootScope);\n    expect($element.find('span').length).to.equal(1);\n    expect($element.find('span').attr('class')).to.equal('toto');\n    expect($element.find('span').text()).to.equal('voila');\n  });\n\n  it('passes the scope in the context', () => {\n    const found = {};\n    class Component extends React.Component {\n      componentDidMount() {\n        found.$scope = this.ra.$scope;\n      }\n\n      render() {\n        return (\n          <div>\n            <AngularTemplate ref={(ra) => this.ra = ra}/>\n            <span className=\"toto\">{this.props.toto}</span>\n          </div>\n        );\n      }\n    }\n    Component.propTypes = {\n      toto: t.string.isRequired,\n    };\n\n    const ComponentPassingScope = provideAngularScopeHOC(Component);\n\n    angular.module('testAngularTemplate').Component = ComponentPassingScope;\n    $rootScope.propsToPass = { toto: 'voila' };\n\n    const $element = $compile('<manual-react props=\"propsToPass\"></manual-react>')($rootScope, (clone) => {\n      $container.append(clone);\n    });\n    $rootScope.$digest();\n\n    expect(found.$scope).to.exist;\n    expect(found.$scope.props).to.exist;\n    expect(found.$scope.props()).to.eql({ toto: 'voila' });\n    expect($element.find('span').length).to.equal(1);\n    expect($element.find('span').attr('class')).to.equal('toto');\n    expect($element.find('span').text()).to.equal('voila');\n  });\n});\n"]}